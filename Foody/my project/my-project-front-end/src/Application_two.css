background-color: #fff5;
    backdrop-filter: blur(7px);
    box-shadow:0  .4rem .8rem #0005;
    border-radius: .8rem;
    background-color: #fff5;

    
    
    
    :root {
        font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
        line-height: 1.5;
        font-weight: 400;
      
        color-scheme: light dark;
        color: rgba(255, 255, 255, 0.87);
        background-color: #242424;
      
        font-synthesis: none;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      a {
        font-weight: 500;
        color: #646cff;
        text-decoration: inherit;
      }
      a:hover {
        color: #535bf2;
      }
      
      body {
        margin: 0;
        display:flex;
        place-items: center;
        min-width: 320px;
        min-height: 100vh;
      }
      
      h1 {
        font-size: 3.2em;
        line-height: 1.1;
      }
      
      button {
        border-radius: 8px;
        border: 1px solid transparent;
        padding: 0.6em 1.2em;
        font-size: 1em;
        font-weight: 500;
        font-family: inherit;
        background-color: #1a1a1a;
        cursor: pointer;
        transition: border-color 0.25s;
      }
      button:hover {
        border-color: #646cff;
      }
      button:focus,
      button:focus-visible {
        outline: 4px auto -webkit-focus-ring-color;
      }
      
      @media (prefers-color-scheme: light) {
        :root {
          color: #213547;
          background-color: #ffffff;
        }
        a:hover {
          color: #747bff;
        }
        button {
          background-color: #f9f9f9;
        }
      }
      /*:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display:flex;
  place-items: center;
  background-color: #ffffff;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}*/
/*import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';



import './newtable.css'
export const newTable = () => {
    const url = "http://localhost:5000"
    const [list,setlist] = useState([])

    const fetchList = async()=>{
        const response = await axios.get(`${url}/api/employee/read`)
        console.log(response.data)
        if(response.data.success){
            setlist(response.data.data)
            toast.success("data passed Success")
        }
        else{
            toast.error("Error")
        }
    }
    useEffect(()=>{
        fetchList()
    },[])

    return(


<main className='table'>
    <section className='table_header'>
        <h1>Employee Table</h1>
    </section>
    <section className='table_body'><table><thead><th>Employee ID</th>
                <th>Name</th>
                <th>Mobile Number</th>
                <th>Monthly Salary</th>
                <th>Status</th>
                <th>HireDate</th>
                <th>Action</th></thead>
                <tbody> {list.map((item,index)=>{
                            return(<tr key={index} className="list-table-format">
                                <td>{item.employee_id}</td>
                                <td>{item.name}</td>
                                <td>{item.phoneNumber}</td>
                                <td>{item.salary}</td>
                                <td>{item.salarypay?"Paid":"Not Paid"}</td>
                                <td>{item.hireDate.split('T')[0]}</td>
                                <td><button>Delete</button></td>
                                
                            </tr>)
                           })}</tbody></table>
 </section>
      
      
    </main>

  )
}*/
/*
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import './newtable.css';

export const NewTable = () => {
    const url = "http://localhost:5000";
    const [list, setlist] = useState([]);
    const[searchid,setsearchid]=useState('')
    const[filteredEmployee,setfilteredEmployee]=useState({})
       
    

    const fetchList = async () => {
        try {
            const response = await axios.get(`${url}/api/employee/read`);
            console.log(response.data);
            if (response.data.success) {
                setlist(response.data.data);
                toast.success("Data fetched successfully");
            } else {
                toast.error("Error fetching data");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to fetch data");
        }
    };
    const fetchEmployee = async (employee_id) => {
        try{
            const response = await axios.get(`${url}/api/employee/read/${employee_id}`)
            if(response.data.success){
                setfilteredEmployee(response.data.data)
                toast.success("sucessful")
            }else{
                toast.error("unsucessful")
                setfilteredEmployee({})
            }
                
        }catch(error){
            console.error("Error",error)
            toast.error("Failed")
            setfilteredEmployee({})
        }
    }

    const handleDelete = async (employeeId) => {
        try {
            const response = await axios.delete(`${url}/api/employee/delete/${employeeId}`);
            if (response.data.success) {
                toast.success("Employee deleted successfully");
                setlist(list.filter(item => item.employee_id !== employeeId));
            } else {
                toast.error("Error deleting employee");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to delete employee");
        }
    };

    useEffect(() => {
        fetchList();
    }, []);

    const handlesearch=(e)=>{
        setsearchid(e.target.value)
    }
    const keyPress = (e)=>{
        if(e.key === 'Enter'){
            if(searchid){
                fetchEmployee(searchid)
            }else{
                toast.error("Enter correct Id")
            }
        }
    }
    const isObjectEmpty= (obj)=>{
        return Object.keys(obj).length === 0
    }

    return (
        <main className='table'>
            <section className='table_header'>
                <h1>Employee Table</h1>
                <div className='input-group'>
                     <input type="search"
                      placeholder='Enter your index'
                      onChange={handlesearch}
                      onKeyDown={keyPress}
                     />
                </div>
            </section>
            <section className='table_body'>
                <table>
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Mobile</th>
                            <th> Salary</th>
                            <th>Status</th>
                            <th>HireDate</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>{!isObjectEmpty(filteredEmployee) ? (<tr  className="list-table-format">
                                <td>{filteredEmployee.employee_id}</td>
                                <td>{filteredEmployee.name}</td>
                                <td>{filteredEmployee.email}</td>
                                <td>{filteredEmployee.phoneNumber}</td>
                                <td><strong>{item.salary}</strong></td>
                                <td>{filteredEmployee.salarypay ? "Paid" : "Not Paid"}</td>
                                <td>{filteredEmployee.hireDate.split('T')[0]}</td>
                                <td>
                                    <button
                                        onClick={() => handleDelete(filteredEmployee.employee_id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr> ):(
                        list.map((item, index) => (
                            <tr key={index} className="list-table-format">
                                <td>{item.employee_id}</td>
                                <td>{item.name}</td>
                                <td>{item.email}</td>
                                <td>{item.phoneNumber}</td>
                                <td><strong>{item.salary}</strong></td>
                                <td>{item.salarypay ? "Paid" : "Not Paid"}</td>
                                <td>{item.hireDate.split('T')[0]}</td>
                                <td>
                                    <button
                                        onClick={() => handleDelete(item.employee_id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                            )))}
                    </tbody>
                </table>
            </section>
        </main>
    );
};
import { useState } from "react";
import "./application.css";
import bike from "./assets/bike.png"
import axios from "axios";

export function Application() {
    const url = "http://localhost:5000";
    const [IsSet, SetVal] = useState(false);

    // State for handling form data
    const [formdata, setformData] = useState({
        employee_id: "",
        name: "",
        email: "",
        phoneNumber: "",
        salary: "",
        salarypay: false,
    });

    // State for handling update data
    
    // For creating a new employee
    const handleOnChange = (e) => {
        const { value, name } = e.target;
        setformData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handlecheckBox = (e) => {
        const { checked, name } = e.target;
        setformData((prev) => ({
            ...prev,
            [name]: checked,
        }));
    };

    // For updating an existing employee
    

    // Submit handler for creating a new employee
    const onSubmitHandler = async (event) => {
        event.preventDefault();

        const formDataSend = new FormData();
        formDataSend.append("employee_id", formdata.employee_id);
        formDataSend.append("name", formdata.name);
        formDataSend.append("email", formdata.email);
        formDataSend.append("phoneNumber", formdata.phoneNumber);
        formDataSend.append("salary", formdata.salary);
        formDataSend.append("salarypay", formdata.salarypay);

        const response = await axios.post(`${url}/api/employee/add`, formDataSend);
        if (response.data.success) {
            setformData({
                employee_id: "",
                name: "",
                email: "",
                phoneNumber: "",
                salary: "",
                salarypay: false,
            });
        } else {
            console.error("Error:", response.data.message);
        }
    };

    // Submit handler for updating an existing employee
    
    return (
        <div className={`container ${IsSet ? "active" : ""}`} id="container">
            {/* Form for creating a new employee */
           /* <div className="form-container sign-up">
                <form onSubmit={onSubmitHandler}>
                    <h1>Register Employee</h1>
                    <input type="text" placeholder="Employee ID" name="employee_id" onChange={handleOnChange} value={formdata.employee_id} />
                    <input type="text" placeholder="Name" name="name" onChange={handleOnChange} value={formdata.name} />
                    <input type="email" placeholder="Email" name="email" onChange={handleOnChange} value={formdata.email} />
                    <input type="text" placeholder="Phone Number" name="phoneNumber" onChange={handleOnChange} value={formdata.phoneNumber} />
                    <input type="text" placeholder="Salary" name="salary" onChange={handleOnChange} value={formdata.salary} />
                    <label htmlFor="sstatus">Salary Payment Status</label>
                    <input type="checkbox" id="sstatus" name="salarypay" onChange={handlecheckBox} checked={formdata.salarypay} />
                    <button type="submit">Submit</button>
                </form>
            </div>

            {/* Form for updating an existing employee }*/
           /* <div className="form-container sign-in">
            <h1>Welcome  to Foody!</h1>
            <img src = {bike} alt="Foody Welcome" className="welcome-image" />
            <h3>Meet the team behind your <br/>Taste</h3>
            



            </div>

            {/* Toggle between forms }*/
           /* <div className="toggle-container">
                <div className="toggle">
                    <div className="toggle-panel toggle-left">
                        <h1>Foody Restaurant</h1>
                        <button onClick={() => SetVal(false)}>Welcome</button>
                    </div>
                    <div className="toggle-panel toggle-right">
                        <h1>Foody Restaurant</h1><br/><br/>
                        <h4>Experience our exceptional service and make every meal unforgettable at Foody Restaurant!</h4>
                        <button onClick={() => SetVal(true)}>Register Employee</button>
                    </div>
                </div>
            </div>
        </div>
    );
}*/
<div className={`container ${IsSet ? "active" : ""}`} id="container">
            {/* Form for creating a new employee */}
            <div className="form-container sign-up">
                <form onSubmit={onSubmitHandler}>
                    <h1>Update Employee</h1>
                    <input type="text" placeholder="Employee ID" name="employee_id" onChange={handleOnChange} value={formdata.employee_id} />
                    <input type="text" placeholder="Name" name="name" onChange={handleOnChange} value={formdata.name} />
                    <input type="email" placeholder="Email" name="email" onChange={handleOnChange} value={formdata.email} />
                    <input type="text" placeholder="Phone Number" name="phoneNumber" onChange={handleOnChange} value={formdata.phoneNumber} />
                    <input type="text" placeholder="Salary" name="salary" onChange={handleOnChange} value={formdata.salary} />
                    <label htmlFor="sstatus">Salary Payment Status</label>
                    <input type="checkbox" id="sstatus" name="salarypay" onChange={handlecheckBox} checked={formdata.salarypay} />
                    <button type="submit">Submit</button>
                </form>
            </div>

            {/* Form for updating an existing employee */}
            <div className="form-container sign-in">
            <h1>Welcome  to Foody!</h1>
            
            <img src = {bike} alt="Foody Welcome" className="welcome-image" />
            <h3>Meet the team behind your <br/>Taste</h3>
            


            </div>

            {/* Toggle between forms */}
            <div className="toggle-container">
                <div className="toggle">
                    <div className="toggle-panel toggle-left">
                        <h1>Foody Restaurant</h1><br/><br/><br/>
                        <h4>Please ensure that both the Employee ID and email address you provide are unique, as these are essential for maintaining accurate and secure records.</h4>
                        <button onClick={() => SetVal(false)}>Welcome</button>
                    </div>
                    <div className="toggle-panel toggle-right">
                        <h1>Foody Restaurant</h1>
                        <button onClick={() => SetVal(true)}>Update Employee</button>
                    </div>
                </div>
                import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import './newtable.css';

export const NewTable = () => {
    const url = "http://localhost:5000";
    const [list, setList] = useState([]);
    const [searchId, setSearchId] = useState('');
    const [filteredEmployee, setFilteredEmployee] = useState({});

    // Fetch list of employees
    const fetchList = async () => {
        try {
            const response = await axios.get(`${url}/api/employee/read`);
            console.log(response.data);
            if (response.data.success) {
                setList(response.data.data);
                toast.success("Data fetched successfully");
            } else {
                toast.error("Error fetching data");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to fetch data");
        }
    };

    // Fetch employee by ID
    const fetchEmployee = async (employee_id) => {
        try {
            const response = await axios.get(`${url}/api/employee/read/${employee_id}`);
            if (response.data.success) {
                setFilteredEmployee(response.data.data);  // Set the fetched employee data
                toast.success("Employee found");
            } else {
                toast.error("Employee not found");
                setFilteredEmployee({});
            }
        } catch (error) {
            console.error("Error", error);
            toast.error("Failed to fetch employee");
            setFilteredEmployee({});
        }
    };

    // Delete an employee
    const handleDelete = async (employeeId) => {
        try {
            const response = await axios.delete(`${url}/api/employee/delete/${employeeId}`);
            if (response.data.success) {
                toast.success("Employee deleted successfully");
                setList(list.filter(item => item.employee_id !== employeeId));
            } else {
                toast.error("Error deleting employee");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to delete employee");
        }
    };

    // Effect to load employee list on component mount
    useEffect(() => {
        fetchList();
    }, []);

    // Handle search input change
    const handleSearch = (e) => {
        setSearchId(e.target.value);
    };

    // Handle pressing Enter key to search by ID
    const KeyPress = (e) => {
        if (e.key === 'Enter') {
            if (searchId) {
                fetchEmployee(searchId);
            } else {
                setSearchId('');
                setFilteredEmployee({})
                fetchList()
                toast.info("Search cleared and data refreshed")
            }
        }
    };

    // Check if an object is empty
    const isObjectEmpty = (obj) => {
        return Object.keys(obj).length === 0;
    };
   
    return (
        <main className='table'>
            <section className='table_header'>
                <h1>Employee Table</h1>
                <div className='input-group'>
                    <input
                        type="search"
                        placeholder='Enter employee ID'
                        onChange={handleSearch}
                        onKeyDown={KeyPress}
                    />
                    
                </div>
            </section>
            <section className='table_body'>
                <table>
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Mobile</th>
                            <th>Salary</th>
                            <th>Status</th>
                            <th>Hire Date</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {/* If a specific employee is searched, show only that employee */}
                        {!isObjectEmpty(filteredEmployee) ? (
                            <tr className="list-table-format">
                                <td>{filteredEmployee.employee_id}</td>
                                <td>{filteredEmployee.name}</td>
                                <td>{filteredEmployee.email}</td>
                                <td>{filteredEmployee.phoneNumber}</td>
                                <td><strong>{filteredEmployee.salary}</strong></td>
                                <td>{filteredEmployee.salarypay ? "Paid" : "Not Paid"}</td>
                                <td>{filteredEmployee.hireDate?.split('T')[0]}</td>
                                <td>
                                    <button
                                        onClick={() => handleDelete(filteredEmployee.employee_id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                        ) : (
                            // If no search is performed, show all employees
                            list.map((item, index) => (
                                <tr key={index} className="list-table-format">
                                    <td>{item.employee_id}</td>
                                    <td>{item.name}</td>
                                    <td>{item.email}</td>
                                    <td>{item.phoneNumber}</td>
                                    <td><strong>{item.salary}</strong></td>
                                    <td>{item.salarypay ? "Paid" : "Not Paid"}</td>
                                    <td>{item.hireDate.split('T')[0]}</td>
                                    <td>
                                        <button
                                            onClick={() => handleDelete(item.employee_id)}
                                            className="delete-button"
                                        >
                                            Delete
                                        </button>
                                    </td>
                                </tr>
                            ))
                        )}
                    </tbody>
                </table>
            </section>
        </main>
    );
};
            </div>
        </div>
        const url = "http://localhost:5000";
    const [IsSet, SetVal] = useState(false);

    // State for handling form data
    const [formdata, setformData] = useState({
        employee_id: "",
        name: "",
        email: "",
        phoneNumber: "",
        salary: "",
        salarypay: false,
    });

    // State for handling update data
    
    // For creating a new employee
    const handleOnChange = (e) => {
        const { value, name } = e.target;
        setformData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handlecheckBox = (e) => {
        const { checked, name } = e.target;
        setformData((prev) => ({
            ...prev,
            [name]: checked,
        }));
    };

    // For updating an existing employee
    

    // Submit handler for creating a new employee