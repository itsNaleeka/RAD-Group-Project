background-color: #fff5;
    backdrop-filter: blur(7px);
    box-shadow:0  .4rem .8rem #0005;
    border-radius: .8rem;
    background-color: #fff5;

    
    
    
    :root {
        font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
        line-height: 1.5;
        font-weight: 400;
      
        color-scheme: light dark;
        color: rgba(255, 255, 255, 0.87);
        background-color: #242424;
      
        font-synthesis: none;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
      }
      
      a {
        font-weight: 500;
        color: #646cff;
        text-decoration: inherit;
      }
      a:hover {
        color: #535bf2;
      }
      
      body {
        margin: 0;
        display:flex;
        place-items: center;
        min-width: 320px;
        min-height: 100vh;
      }
      
      h1 {
        font-size: 3.2em;
        line-height: 1.1;
      }
      
      button {
        border-radius: 8px;
        border: 1px solid transparent;
        padding: 0.6em 1.2em;
        font-size: 1em;
        font-weight: 500;
        font-family: inherit;
        background-color: #1a1a1a;
        cursor: pointer;
        transition: border-color 0.25s;
      }
      button:hover {
        border-color: #646cff;
      }
      button:focus,
      button:focus-visible {
        outline: 4px auto -webkit-focus-ring-color;
      }
      
      @media (prefers-color-scheme: light) {
        :root {
          color: #213547;
          background-color: #ffffff;
        }
        a:hover {
          color: #747bff;
        }
        button {
          background-color: #f9f9f9;
        }
      }
      /*:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display:flex;
  place-items: center;
  background-color: #ffffff;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}*/
/*import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';



import './newtable.css'
export const newTable = () => {
    const url = "http://localhost:5000"
    const [list,setlist] = useState([])

    const fetchList = async()=>{
        const response = await axios.get(`${url}/api/employee/read`)
        console.log(response.data)
        if(response.data.success){
            setlist(response.data.data)
            toast.success("data passed Success")
        }
        else{
            toast.error("Error")
        }
    }
    useEffect(()=>{
        fetchList()
    },[])

    return(


<main className='table'>
    <section className='table_header'>
        <h1>Employee Table</h1>
    </section>
    <section className='table_body'><table><thead><th>Employee ID</th>
                <th>Name</th>
                <th>Mobile Number</th>
                <th>Monthly Salary</th>
                <th>Status</th>
                <th>HireDate</th>
                <th>Action</th></thead>
                <tbody> {list.map((item,index)=>{
                            return(<tr key={index} className="list-table-format">
                                <td>{item.employee_id}</td>
                                <td>{item.name}</td>
                                <td>{item.phoneNumber}</td>
                                <td>{item.salary}</td>
                                <td>{item.salarypay?"Paid":"Not Paid"}</td>
                                <td>{item.hireDate.split('T')[0]}</td>
                                <td><button>Delete</button></td>
                                
                            </tr>)
                           })}</tbody></table>
 </section>
      
      
    </main>

  )
}*/
/*
import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import './newtable.css';

export const NewTable = () => {
    const url = "http://localhost:5000";
    const [list, setlist] = useState([]);
    const[searchid,setsearchid]=useState('')
    const[filteredEmployee,setfilteredEmployee]=useState({})
       
    

    const fetchList = async () => {
        try {
            const response = await axios.get(`${url}/api/employee/read`);
            console.log(response.data);
            if (response.data.success) {
                setlist(response.data.data);
                toast.success("Data fetched successfully");
            } else {
                toast.error("Error fetching data");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to fetch data");
        }
    };
    const fetchEmployee = async (employee_id) => {
        try{
            const response = await axios.get(`${url}/api/employee/read/${employee_id}`)
            if(response.data.success){
                setfilteredEmployee(response.data.data)
                toast.success("sucessful")
            }else{
                toast.error("unsucessful")
                setfilteredEmployee({})
            }
                
        }catch(error){
            console.error("Error",error)
            toast.error("Failed")
            setfilteredEmployee({})
        }
    }

    const handleDelete = async (employeeId) => {
        try {
            const response = await axios.delete(`${url}/api/employee/delete/${employeeId}`);
            if (response.data.success) {
                toast.success("Employee deleted successfully");
                setlist(list.filter(item => item.employee_id !== employeeId));
            } else {
                toast.error("Error deleting employee");
            }
        } catch (error) {
            console.error("Error:", error);
            toast.error("Failed to delete employee");
        }
    };

    useEffect(() => {
        fetchList();
    }, []);

    const handlesearch=(e)=>{
        setsearchid(e.target.value)
    }
    const keyPress = (e)=>{
        if(e.key === 'Enter'){
            if(searchid){
                fetchEmployee(searchid)
            }else{
                toast.error("Enter correct Id")
            }
        }
    }
    const isObjectEmpty= (obj)=>{
        return Object.keys(obj).length === 0
    }

    return (
        <main className='table'>
            <section className='table_header'>
                <h1>Employee Table</h1>
                <div className='input-group'>
                     <input type="search"
                      placeholder='Enter your index'
                      onChange={handlesearch}
                      onKeyDown={keyPress}
                     />
                </div>
            </section>
            <section className='table_body'>
                <table>
                    <thead>
                        <tr>
                            <th>Employee ID</th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Mobile</th>
                            <th> Salary</th>
                            <th>Status</th>
                            <th>HireDate</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>{!isObjectEmpty(filteredEmployee) ? (<tr  className="list-table-format">
                                <td>{filteredEmployee.employee_id}</td>
                                <td>{filteredEmployee.name}</td>
                                <td>{filteredEmployee.email}</td>
                                <td>{filteredEmployee.phoneNumber}</td>
                                <td><strong>{item.salary}</strong></td>
                                <td>{filteredEmployee.salarypay ? "Paid" : "Not Paid"}</td>
                                <td>{filteredEmployee.hireDate.split('T')[0]}</td>
                                <td>
                                    <button
                                        onClick={() => handleDelete(filteredEmployee.employee_id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr> ):(
                        list.map((item, index) => (
                            <tr key={index} className="list-table-format">
                                <td>{item.employee_id}</td>
                                <td>{item.name}</td>
                                <td>{item.email}</td>
                                <td>{item.phoneNumber}</td>
                                <td><strong>{item.salary}</strong></td>
                                <td>{item.salarypay ? "Paid" : "Not Paid"}</td>
                                <td>{item.hireDate.split('T')[0]}</td>
                                <td>
                                    <button
                                        onClick={() => handleDelete(item.employee_id)}
                                        className="delete-button"
                                    >
                                        Delete
                                    </button>
                                </td>
                            </tr>
                            )))}
                    </tbody>
                </table>
            </section>
        </main>
    );
};
*/